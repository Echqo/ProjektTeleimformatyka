
AP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00000648  000006dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  008001a6  008001a6  00000782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b4d  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b81  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abb  00000000  00000000  00002f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00003a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b59  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5a c0       	rjmp	.+180    	; 0xb6 <__ctors_end>
   2:	00 00       	nop
   4:	73 c0       	rjmp	.+230    	; 0xec <__bad_interrupt>
   6:	00 00       	nop
   8:	71 c0       	rjmp	.+226    	; 0xec <__bad_interrupt>
   a:	00 00       	nop
   c:	6f c0       	rjmp	.+222    	; 0xec <__bad_interrupt>
   e:	00 00       	nop
  10:	6d c0       	rjmp	.+218    	; 0xec <__bad_interrupt>
  12:	00 00       	nop
  14:	6b c0       	rjmp	.+214    	; 0xec <__bad_interrupt>
  16:	00 00       	nop
  18:	69 c0       	rjmp	.+210    	; 0xec <__bad_interrupt>
  1a:	00 00       	nop
  1c:	67 c0       	rjmp	.+206    	; 0xec <__bad_interrupt>
  1e:	00 00       	nop
  20:	65 c0       	rjmp	.+202    	; 0xec <__bad_interrupt>
  22:	00 00       	nop
  24:	63 c0       	rjmp	.+198    	; 0xec <__bad_interrupt>
  26:	00 00       	nop
  28:	61 c0       	rjmp	.+194    	; 0xec <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5f c0       	rjmp	.+190    	; 0xec <__bad_interrupt>
  2e:	00 00       	nop
  30:	5d c0       	rjmp	.+186    	; 0xec <__bad_interrupt>
  32:	00 00       	nop
  34:	5b c0       	rjmp	.+182    	; 0xec <__bad_interrupt>
  36:	00 00       	nop
  38:	59 c0       	rjmp	.+178    	; 0xec <__bad_interrupt>
  3a:	00 00       	nop
  3c:	57 c0       	rjmp	.+174    	; 0xec <__bad_interrupt>
  3e:	00 00       	nop
  40:	55 c0       	rjmp	.+170    	; 0xec <__bad_interrupt>
  42:	00 00       	nop
  44:	53 c0       	rjmp	.+166    	; 0xec <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c1       	rjmp	.+608    	; 0x2aa <__vector_18>
  4a:	00 00       	nop
  4c:	4f c0       	rjmp	.+158    	; 0xec <__bad_interrupt>
  4e:	00 00       	nop
  50:	4d c0       	rjmp	.+154    	; 0xec <__bad_interrupt>
  52:	00 00       	nop
  54:	4b c0       	rjmp	.+150    	; 0xec <__bad_interrupt>
  56:	00 00       	nop
  58:	49 c0       	rjmp	.+146    	; 0xec <__bad_interrupt>
  5a:	00 00       	nop
  5c:	47 c0       	rjmp	.+142    	; 0xec <__bad_interrupt>
  5e:	00 00       	nop
  60:	45 c0       	rjmp	.+138    	; 0xec <__bad_interrupt>
  62:	00 00       	nop
  64:	43 c0       	rjmp	.+134    	; 0xec <__bad_interrupt>
  66:	00 00       	nop
  68:	d8 01       	movw	r26, r16
  6a:	e9 01       	movw	r28, r18
  6c:	fa 01       	movw	r30, r20
  6e:	0b 02       	muls	r16, r27
  70:	1c 02       	muls	r17, r28
  72:	2d 02       	muls	r18, r29
  74:	3e 02       	muls	r19, r30
  76:	4f 02       	muls	r20, r31

00000078 <__trampolines_end>:
  78:	53 54       	subi	r21, 0x43	; 67
  7a:	41 52       	subi	r20, 0x21	; 33
  7c:	54 00       	.word	0x0054	; ????

0000007e <__c.2142>:
  7e:	20 00                                                .

00000080 <__c.2137>:
  80:	57 69 46 69 20 41 50 00                             WiFi AP.

00000088 <__c.2131>:
  88:	43 50 53 54 00                                      CPST.

0000008d <__c.2128>:
  8d:	43 50 53 56 00                                      CPSV.

00000092 <__c.2125>:
  92:	43 50 4d 55 00                                      CPMU.

00000097 <__c.2122>:
  97:	43 57 53 41 50 00                                   CWSAP.

0000009d <__c.2119>:
  9d:	43 49 50 41 50 00                                   CIPAP.

000000a3 <__c.2116>:
  a3:	43 57 4d 4f 44 45 00                                CWMODE.

000000aa <__c.2112>:
  aa:	41 54 45 30 00                                      ATE0.

000000af <__c.2108>:
  af:	72 65 61 64 79 00 00                                ready..

000000b6 <__ctors_end>:
  b6:	11 24       	eor	r1, r1
  b8:	1f be       	out	0x3f, r1	; 63
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	d8 e0       	ldi	r29, 0x08	; 8
  be:	de bf       	out	0x3e, r29	; 62
  c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
  c2:	11 e0       	ldi	r17, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	e8 e4       	ldi	r30, 0x48	; 72
  ca:	f6 e0       	ldi	r31, 0x06	; 6
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
  ce:	05 90       	lpm	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	a6 3a       	cpi	r26, 0xA6	; 166
  d4:	b1 07       	cpc	r27, r17
  d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a6 ea       	ldi	r26, 0xA6	; 166
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	af 3e       	cpi	r26, 0xEF	; 239
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	de d1       	rcall	.+956    	; 0x4a6 <main>
  ea:	ac c2       	rjmp	.+1368   	; 0x644 <_exit>

000000ec <__bad_interrupt>:
  ec:	89 cf       	rjmp	.-238    	; 0x0 <__vectors>

000000ee <rejestr>:
{
    unsigned char i =0;

    while(str[i])
        LCD_WRITE_DATA(str[i++]) ;
}
  ee:	66 23       	and	r22, r22
  f0:	31 f0       	breq	.+12     	; 0xfe <rejestr+0x10>
  f2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <__data_end>
  f6:	89 2b       	or	r24, r25
  f8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
  fc:	06 c0       	rjmp	.+12     	; 0x10a <rejestr+0x1c>
  fe:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <__data_end>
 102:	80 95       	com	r24
 104:	89 23       	and	r24, r25
 106:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
 10a:	41 98       	cbi	0x08, 1	; 8
 10c:	42 98       	cbi	0x08, 2	; 8
 10e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 112:	85 ff       	sbrs	r24, 5
 114:	02 c0       	rjmp	.+4      	; 0x11a <rejestr+0x2c>
 116:	40 9a       	sbi	0x08, 0	; 8
 118:	01 c0       	rjmp	.+2      	; 0x11c <rejestr+0x2e>
 11a:	40 98       	cbi	0x08, 0	; 8
 11c:	42 9a       	sbi	0x08, 2	; 8
 11e:	42 98       	cbi	0x08, 2	; 8
 120:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 124:	84 ff       	sbrs	r24, 4
 126:	02 c0       	rjmp	.+4      	; 0x12c <rejestr+0x3e>
 128:	40 9a       	sbi	0x08, 0	; 8
 12a:	01 c0       	rjmp	.+2      	; 0x12e <rejestr+0x40>
 12c:	40 98       	cbi	0x08, 0	; 8
 12e:	42 9a       	sbi	0x08, 2	; 8
 130:	42 98       	cbi	0x08, 2	; 8
 132:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 136:	83 ff       	sbrs	r24, 3
 138:	02 c0       	rjmp	.+4      	; 0x13e <rejestr+0x50>
 13a:	40 9a       	sbi	0x08, 0	; 8
 13c:	01 c0       	rjmp	.+2      	; 0x140 <rejestr+0x52>
 13e:	40 98       	cbi	0x08, 0	; 8
 140:	42 9a       	sbi	0x08, 2	; 8
 142:	42 98       	cbi	0x08, 2	; 8
 144:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 148:	82 ff       	sbrs	r24, 2
 14a:	02 c0       	rjmp	.+4      	; 0x150 <rejestr+0x62>
 14c:	40 9a       	sbi	0x08, 0	; 8
 14e:	01 c0       	rjmp	.+2      	; 0x152 <rejestr+0x64>
 150:	40 98       	cbi	0x08, 0	; 8
 152:	42 9a       	sbi	0x08, 2	; 8
 154:	42 98       	cbi	0x08, 2	; 8
 156:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 15a:	81 ff       	sbrs	r24, 1
 15c:	02 c0       	rjmp	.+4      	; 0x162 <rejestr+0x74>
 15e:	40 9a       	sbi	0x08, 0	; 8
 160:	01 c0       	rjmp	.+2      	; 0x164 <rejestr+0x76>
 162:	40 98       	cbi	0x08, 0	; 8
 164:	42 9a       	sbi	0x08, 2	; 8
 166:	42 98       	cbi	0x08, 2	; 8
 168:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 16c:	80 ff       	sbrs	r24, 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <rejestr+0x86>
 170:	40 9a       	sbi	0x08, 0	; 8
 172:	01 c0       	rjmp	.+2      	; 0x176 <rejestr+0x88>
 174:	40 98       	cbi	0x08, 0	; 8
 176:	42 9a       	sbi	0x08, 2	; 8
 178:	41 9a       	sbi	0x08, 1	; 8
 17a:	08 95       	ret

0000017c <WriteToLCD>:
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	19 f4       	brne	.+6      	; 0x18a <WriteToLCD+0xe>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	b3 df       	rcall	.-154    	; 0xee <rejestr>
 188:	03 c0       	rjmp	.+6      	; 0x190 <WriteToLCD+0x14>
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	af df       	rcall	.-162    	; 0xee <rejestr>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	ac df       	rcall	.-168    	; 0xee <rejestr>
 196:	c4 ff       	sbrs	r28, 4
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <WriteToLCD+0x26>
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	a7 df       	rcall	.-178    	; 0xee <rejestr>
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <WriteToLCD+0x2c>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	a3 df       	rcall	.-186    	; 0xee <rejestr>
 1a8:	c5 ff       	sbrs	r28, 5
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <WriteToLCD+0x38>
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	9e df       	rcall	.-196    	; 0xee <rejestr>
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <WriteToLCD+0x3e>
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	9a df       	rcall	.-204    	; 0xee <rejestr>
 1ba:	c6 ff       	sbrs	r28, 6
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <WriteToLCD+0x4a>
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	95 df       	rcall	.-214    	; 0xee <rejestr>
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <WriteToLCD+0x50>
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	91 df       	rcall	.-222    	; 0xee <rejestr>
 1cc:	cc 23       	and	r28, r28
 1ce:	24 f4       	brge	.+8      	; 0x1d8 <WriteToLCD+0x5c>
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	8c df       	rcall	.-232    	; 0xee <rejestr>
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <WriteToLCD+0x62>
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	80 e2       	ldi	r24, 0x20	; 32
 1dc:	88 df       	rcall	.-240    	; 0xee <rejestr>
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	85 df       	rcall	.-246    	; 0xee <rejestr>
 1e4:	8f e3       	ldi	r24, 0x3F	; 63
 1e6:	9f e1       	ldi	r25, 0x1F	; 31
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <WriteToLCD+0x6c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <WriteToLCD+0x72>
 1ee:	00 00       	nop
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	7c df       	rcall	.-264    	; 0xee <rejestr>
 1f6:	c0 ff       	sbrs	r28, 0
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <WriteToLCD+0x86>
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	77 df       	rcall	.-274    	; 0xee <rejestr>
 200:	03 c0       	rjmp	.+6      	; 0x208 <WriteToLCD+0x8c>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	73 df       	rcall	.-282    	; 0xee <rejestr>
 208:	c1 ff       	sbrs	r28, 1
 20a:	04 c0       	rjmp	.+8      	; 0x214 <WriteToLCD+0x98>
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	6e df       	rcall	.-292    	; 0xee <rejestr>
 212:	03 c0       	rjmp	.+6      	; 0x21a <WriteToLCD+0x9e>
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	6a df       	rcall	.-300    	; 0xee <rejestr>
 21a:	c2 ff       	sbrs	r28, 2
 21c:	04 c0       	rjmp	.+8      	; 0x226 <WriteToLCD+0xaa>
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	65 df       	rcall	.-310    	; 0xee <rejestr>
 224:	03 c0       	rjmp	.+6      	; 0x22c <WriteToLCD+0xb0>
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	61 df       	rcall	.-318    	; 0xee <rejestr>
 22c:	c3 ff       	sbrs	r28, 3
 22e:	04 c0       	rjmp	.+8      	; 0x238 <WriteToLCD+0xbc>
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	80 e2       	ldi	r24, 0x20	; 32
 234:	5c df       	rcall	.-328    	; 0xee <rejestr>
 236:	03 c0       	rjmp	.+6      	; 0x23e <WriteToLCD+0xc2>
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	58 df       	rcall	.-336    	; 0xee <rejestr>
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	55 df       	rcall	.-342    	; 0xee <rejestr>
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9f e1       	ldi	r25, 0x1F	; 31
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <WriteToLCD+0xcc>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <WriteToLCD+0xd2>
 24e:	00 00       	nop
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <lcd_init>:
 254:	87 b1       	in	r24, 0x07	; 7
 256:	87 60       	ori	r24, 0x07	; 7
 258:	87 b9       	out	0x07, r24	; 7
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <lcd_init+0xc>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_init+0x16>
 26a:	00 00       	nop
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	82 e1       	ldi	r24, 0x12	; 18
 270:	85 df       	rcall	.-246    	; 0x17c <WriteToLCD>
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	8c e0       	ldi	r24, 0x0C	; 12
 276:	82 df       	rcall	.-252    	; 0x17c <WriteToLCD>
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	7f df       	rcall	.-258    	; 0x17c <WriteToLCD>
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	7c cf       	rjmp	.-264    	; 0x17c <WriteToLCD>
 284:	08 95       	ret

00000286 <lcd_FLASH>:
void lcd_FLASH(const char *str)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
unsigned char znak=0;
	while((znak=pgm_read_byte(str++)))
 28a:	ec 01       	movw	r28, r24
 28c:	21 96       	adiw	r28, 0x01	; 1
 28e:	fc 01       	movw	r30, r24
 290:	84 91       	lpm	r24, Z
 292:	88 23       	and	r24, r24
 294:	39 f0       	breq	.+14     	; 0x2a4 <lcd_FLASH+0x1e>
		LCD_WRITE_DATA(znak);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	71 df       	rcall	.-286    	; 0x17c <WriteToLCD>
        LCD_WRITE_DATA(str[i++]) ;
}
void lcd_FLASH(const char *str)
{
unsigned char znak=0;
	while((znak=pgm_read_byte(str++)))
 29a:	fe 01       	movw	r30, r28
 29c:	84 91       	lpm	r24, Z
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	81 11       	cpse	r24, r1
 2a2:	f9 cf       	rjmp	.-14     	; 0x296 <lcd_FLASH+0x10>
		LCD_WRITE_DATA(znak);
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <__vector_18>:
#define przesuniecie_nr_urzadzenia 2
uint8_t ipd;
uint8_t *ptr;
inline uint8_t* znajdz(const char *pattern);
ISR(USART_RX_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	znak=UDR0;
 2ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2be:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <znak>
	if(znak==10 || znak ==13)
 2c2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <znak>
 2c6:	8a 30       	cpi	r24, 0x0A	; 10
 2c8:	21 f0       	breq	.+8      	; 0x2d2 <__vector_18+0x28>
 2ca:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <znak>
 2ce:	8d 30       	cpi	r24, 0x0D	; 13
 2d0:	49 f4       	brne	.+18     	; 0x2e4 <__vector_18+0x3a>
	{
		if(indeks_uart)
 2d2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <indeks_uart>
 2d6:	88 23       	and	r24, r24
 2d8:	29 f0       	breq	.+10     	; 0x2e4 <__vector_18+0x3a>
		{
			indeks_uart=0;
 2da:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <indeks_uart>
			flaga_uart=1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <flaga_uart>
		}
	}
	if(znak!=13 && znak !=10)
 2e4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <znak>
 2e8:	8d 30       	cpi	r24, 0x0D	; 13
 2ea:	a9 f0       	breq	.+42     	; 0x316 <__vector_18+0x6c>
 2ec:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <znak>
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	89 f0       	breq	.+34     	; 0x316 <__vector_18+0x6c>
	{
		esp_uart[indeks_uart++]=znak;
 2f4:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <indeks_uart>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	8e 0f       	add	r24, r30
 2fc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <indeks_uart>
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <znak>
 306:	e4 55       	subi	r30, 0x54	; 84
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 83       	st	Z, r24
		indeks_uart &= 0x3f;		//utnij gdyby indeks > 63
 30c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <indeks_uart>
 310:	8f 73       	andi	r24, 0x3F	; 63
 312:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <indeks_uart>
	}
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <esp_startup>:
    }
}

inline uint8_t* znajdz(const char *pattern)
{
	return(strstr(esp_uart,pattern));	
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	71 e0       	ldi	r23, 0x01	; 1
 32a:	8c ea       	ldi	r24, 0xAC	; 172
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	70 d1       	rcall	.+736    	; 0x610 <strstr>
void esp_startup(void)
{
	enum esp_enum {ESP_ATE=1,ESP_CWMODE,ESP_CIPAP,ESP_CWSAP,ESP_CIPMUX,ESP_CIPSERVER,ESP_CISPSTO,ESP_SUCCESS};
	static uint8_t esp_status=0;
	uint8_t new_cmd=0;
	if((ptr=znajdz("IPD")))
 330:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ptr+0x1>
 334:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ptr>
 338:	89 2b       	or	r24, r25
 33a:	21 f0       	breq	.+8      	; 0x344 <esp_startup+0x1e>
	{
		ipd=1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <ipd>
		return;
 342:	08 95       	ret
    }
}

inline uint8_t* znajdz(const char *pattern)
{
	return(strstr(esp_uart,pattern));	
 344:	64 e0       	ldi	r22, 0x04	; 4
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	8c ea       	ldi	r24, 0xAC	; 172
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	61 d1       	rcall	.+706    	; 0x610 <strstr>
	if((ptr=znajdz("IPD")))
	{
		ipd=1;
		return;
	}
	if(znajdz("ready"))
 34e:	89 2b       	or	r24, r25
	{
		#ifdef debug
			pos(0,0);
 350:	51 f0       	breq	.+20     	; 0x366 <esp_startup+0x40>
 352:	60 e0       	ldi	r22, 0x00	; 0
			lcd("ready");
 354:	80 e8       	ldi	r24, 0x80	; 128
 356:	12 df       	rcall	.-476    	; 0x17c <WriteToLCD>
 358:	8f ea       	ldi	r24, 0xAF	; 175
 35a:	90 e0       	ldi	r25, 0x00	; 0
		#endif
		esp_status = ESP_ATE;
 35c:	94 df       	rcall	.-216    	; 0x286 <lcd_FLASH>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <esp_status.2106>
    }
}

inline uint8_t* znajdz(const char *pattern)
{
	return(strstr(esp_uart,pattern));	
 364:	25 c0       	rjmp	.+74     	; 0x3b0 <esp_startup+0x8a>
 366:	6a e0       	ldi	r22, 0x0A	; 10
 368:	71 e0       	ldi	r23, 0x01	; 1
 36a:	8c ea       	ldi	r24, 0xAC	; 172
			lcd("ready");
		#endif
		esp_status = ESP_ATE;
		new_cmd=1;
	}
	else if(znajdz("OK"))
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	50 d1       	rcall	.+672    	; 0x610 <strstr>
 370:	89 2b       	or	r24, r25
	{
		if(esp_status && esp_status <= ESP_SUCCESS)
 372:	09 f4       	brne	.+2      	; 0x376 <esp_startup+0x50>
 374:	97 c0       	rjmp	.+302    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 376:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <esp_status.2106>
 37a:	9f ef       	ldi	r25, 0xFF	; 255
 37c:	98 0f       	add	r25, r24
		{	esp_status++;}
 37e:	98 30       	cpi	r25, 0x08	; 8
 380:	18 f4       	brcc	.+6      	; 0x388 <esp_startup+0x62>
 382:	8f 5f       	subi	r24, 0xFF	; 255
		new_cmd=1;
		memset(esp_uart,0,64);
 384:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <esp_status.2106>
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	ec ea       	ldi	r30, 0xAC	; 172
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	df 01       	movw	r26, r30
 390:	1d 92       	st	X+, r1
	}
	
	if(new_cmd)
	{
		new_cmd=0;
		switch(esp_status)
 392:	8a 95       	dec	r24
 394:	e9 f7       	brne	.-6      	; 0x390 <esp_startup+0x6a>
 396:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <esp_status.2106>
 39a:	8e 2f       	mov	r24, r30
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	e8 30       	cpi	r30, 0x08	; 8
 3a4:	f1 05       	cpc	r31, r1
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <esp_startup+0x84>
		{
			case ESP_ATE:
			{
				#ifdef debug
					pos(0,1);
 3a8:	7d c0       	rjmp	.+250    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3aa:	ec 5c       	subi	r30, 0xCC	; 204
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	23 c1       	rjmp	.+582    	; 0x5f6 <__tablejump2__>
					lcd("ATE0");
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	e3 de       	rcall	.-570    	; 0x17c <WriteToLCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b6:	8a ea       	ldi	r24, 0xAA	; 170
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	65 df       	rcall	.-310    	; 0x286 <lcd_FLASH>
				#endif
				new_cmd=0;
				_delay_ms(10);
				UART_Write("ATE0");UART_crlf();
 3bc:	8f e3       	ldi	r24, 0x3F	; 63
 3be:	9c e9       	ldi	r25, 0x9C	; 156
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <esp_startup+0x9a>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <esp_startup+0xa0>
				break;
 3c6:	00 00       	nop
			}
			case ESP_CWMODE:
			{
				#ifdef debug
					pos(20,0);
 3c8:	8d e0       	ldi	r24, 0x0D	; 13
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	01 d1       	rcall	.+514    	; 0x5d0 <UART_Write>
					lcd("CWMODE");
 3ce:	0e c1       	rjmp	.+540    	; 0x5ec <UART_crlf>
 3d0:	08 95       	ret
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	84 e9       	ldi	r24, 0x94	; 148
 3d6:	d2 de       	rcall	.-604    	; 0x17c <WriteToLCD>
 3d8:	83 ea       	ldi	r24, 0xA3	; 163
				#endif
				_delay_ms(10);
				UART_Write("AT+CWMODE=2");UART_crlf();
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	54 df       	rcall	.-344    	; 0x286 <lcd_FLASH>
 3de:	af e3       	ldi	r26, 0x3F	; 63
 3e0:	bc e9       	ldi	r27, 0x9C	; 156
 3e2:	11 97       	sbiw	r26, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <esp_startup+0xbc>
				break;
			}
			case ESP_CIPAP:
			{
				#ifdef debug
					pos(20,1);
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <esp_startup+0xc2>
 3e8:	00 00       	nop
					lcd("CIPAP");
 3ea:	82 e1       	ldi	r24, 0x12	; 18
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	f0 d0       	rcall	.+480    	; 0x5d0 <UART_Write>
 3f0:	fd c0       	rjmp	.+506    	; 0x5ec <UART_crlf>
 3f2:	08 95       	ret
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	84 ed       	ldi	r24, 0xD4	; 212
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPAP_DEF=\"192.168.4.0\",\"192.168.4.0\",\"255.255.255.0\"");UART_crlf();
 3f8:	c1 de       	rcall	.-638    	; 0x17c <WriteToLCD>
 3fa:	8d e9       	ldi	r24, 0x9D	; 157
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	43 df       	rcall	.-378    	; 0x286 <lcd_FLASH>
				break;
 400:	8f e3       	ldi	r24, 0x3F	; 63
			}
			case ESP_CWSAP:
			{
				#ifdef debug
					pos(10,0);
 402:	9c e9       	ldi	r25, 0x9C	; 156
 404:	01 97       	sbiw	r24, 0x01	; 1
					lcd("CWSAP");
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	8e e1       	ldi	r24, 0x1E	; 30
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	df d0       	rcall	.+446    	; 0x5d0 <UART_Write>
 412:	ec c0       	rjmp	.+472    	; 0x5ec <UART_crlf>
				#endif	
				_delay_ms(10);
				UART_Write("AT+CWSAP_DEF=\"PTPT\",\"12341234\",6,4");UART_crlf();
 414:	08 95       	ret
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	8a e8       	ldi	r24, 0x8A	; 138
 41a:	b0 de       	rcall	.-672    	; 0x17c <WriteToLCD>
				break;
			}
			case ESP_CIPMUX:
			{
				#ifdef debug
					pos(10,1);
 41c:	87 e9       	ldi	r24, 0x97	; 151
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	32 df       	rcall	.-412    	; 0x286 <lcd_FLASH>
					lcd("CPMU");
 422:	af e3       	ldi	r26, 0x3F	; 63
 424:	bc e9       	ldi	r27, 0x9C	; 156
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	87 e5       	ldi	r24, 0x57	; 87
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPMUX=1");UART_crlf();
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	ce d0       	rcall	.+412    	; 0x5d0 <UART_Write>
 434:	db c0       	rjmp	.+438    	; 0x5ec <UART_crlf>
 436:	08 95       	ret
				break;
 438:	60 e0       	ldi	r22, 0x00	; 0
			}
			case ESP_CIPSERVER:
			{
				#ifdef debug
					pos(30,0);
 43a:	8a ec       	ldi	r24, 0xCA	; 202
 43c:	9f de       	rcall	.-706    	; 0x17c <WriteToLCD>
 43e:	82 e9       	ldi	r24, 0x92	; 146
 440:	90 e0       	ldi	r25, 0x00	; 0
					lcd("CPSV");
 442:	21 df       	rcall	.-446    	; 0x286 <lcd_FLASH>
 444:	8f e3       	ldi	r24, 0x3F	; 63
 446:	9c e9       	ldi	r25, 0x9C	; 156
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	8a e7       	ldi	r24, 0x7A	; 122
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPSERVER=1,81");UART_crlf();
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	bd d0       	rcall	.+378    	; 0x5d0 <UART_Write>
 456:	ca c0       	rjmp	.+404    	; 0x5ec <UART_crlf>
 458:	08 95       	ret
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	8e e9       	ldi	r24, 0x9E	; 158
				break;
 45e:	8e de       	rcall	.-740    	; 0x17c <WriteToLCD>
			}
			case ESP_CISPSTO:
			{
				#ifdef debug
					pos(30,1);
 460:	8d e8       	ldi	r24, 0x8D	; 141
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	10 df       	rcall	.-480    	; 0x286 <lcd_FLASH>
 466:	af e3       	ldi	r26, 0x3F	; 63
					lcd("CPST");
 468:	bc e9       	ldi	r27, 0x9C	; 156
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
 472:	86 e8       	ldi	r24, 0x86	; 134
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	ac d0       	rcall	.+344    	; 0x5d0 <UART_Write>
 478:	b9 c0       	rjmp	.+370    	; 0x5ec <UART_crlf>
 47a:	08 95       	ret
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPSTO=100");UART_crlf();
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	8e ed       	ldi	r24, 0xDE	; 222
 480:	7d de       	rcall	.-774    	; 0x17c <WriteToLCD>
 482:	88 e8       	ldi	r24, 0x88	; 136
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	ff de       	rcall	.-514    	; 0x286 <lcd_FLASH>
				break;
 488:	8f e3       	ldi	r24, 0x3F	; 63
			}
			case ESP_SUCCESS:
			{
				server_ready=1;
 48a:	9c e9       	ldi	r25, 0x9C	; 156
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	88 e9       	ldi	r24, 0x98	; 152
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	9b d0       	rcall	.+310    	; 0x5d0 <UART_Write>
 49a:	a8 c0       	rjmp	.+336    	; 0x5ec <UART_crlf>
 49c:	08 95       	ret
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <server_ready>
 4a4:	08 95       	ret

000004a6 <main>:
		}//switch		
	}//new cmd
}

int main(void)
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	c0 54       	subi	r28, 0x40	; 64
 4b0:	d1 09       	sbc	r29, r1
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
	UART_Init();
	lcd_init();
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	75 d0       	rcall	.+234    	; 0x5a8 <UART_Init>
	sei();
  
	lcd("WiFi AP");
 4be:	ca de       	rcall	.-620    	; 0x254 <lcd_init>
 4c0:	78 94       	sei
 4c2:	80 e8       	ldi	r24, 0x80	; 128
			if(ipd)
			{
				
				pos(0,0);
				lcd(" ");
				strcpy(bufor_uart,esp_uart);
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	df de       	rcall	.-578    	; 0x286 <lcd_FLASH>
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	6c 01       	movw	r12, r24
 4ce:	7e 01       	movw	r14, r28
 4d0:	94 e0       	ldi	r25, 0x04	; 4
				for(uint8_t i=0;i < 3;i++)
				{
					LCD_WRITE_DATA(bufor_uart[i]);
				}
				ipd=0;
				memset(bufor_uart,0,sizeof (bufor_uart));
 4d2:	e9 0e       	add	r14, r25
 4d4:	f1 1c       	adc	r15, r1
 4d6:	68 94       	set
			if(ipd)
			{
				
				pos(0,0);
				lcd(" ");
				strcpy(bufor_uart,esp_uart);
 4d8:	99 24       	eor	r9, r9
 4da:	96 f8       	bld	r9, 6
	uint8_t *ptr;
	char wifi_strength[6];
	
    while (1) 
    {
		if(flaga_uart)
 4dc:	ac 2c       	mov	r10, r12
 4de:	bd 2c       	mov	r11, r13
 4e0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <flaga_uart>
		{
			flaga_uart=0;
 4e4:	88 23       	and	r24, r24
 4e6:	09 f4       	brne	.+2      	; 0x4ea <main+0x44>
			esp_startup();
 4e8:	4e c0       	rjmp	.+156    	; 0x586 <main+0xe0>
 4ea:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <flaga_uart>
			if(ipd)
 4ee:	1b df       	rcall	.-458    	; 0x326 <esp_startup>
 4f0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <ipd>
			{
				
				pos(0,0);
 4f4:	88 23       	and	r24, r24
 4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0x54>
 4f8:	46 c0       	rjmp	.+140    	; 0x586 <main+0xe0>
				lcd(" ");
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	3e de       	rcall	.-900    	; 0x17c <WriteToLCD>
				strcpy(bufor_uart,esp_uart);
 500:	8e e7       	ldi	r24, 0x7E	; 126
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	c0 de       	rcall	.-640    	; 0x286 <lcd_FLASH>
 506:	6c ea       	ldi	r22, 0xAC	; 172
 508:	71 e0       	ldi	r23, 0x01	; 1
				strcpy(bufor_uart,bufor_uart + przesuniecie_ramki_ipd);//"1,-15"
 50a:	8a 2d       	mov	r24, r10
 50c:	9b 2d       	mov	r25, r11
 50e:	79 d0       	rcall	.+242    	; 0x602 <strcpy>
 510:	be 01       	movw	r22, r28
 512:	66 5f       	subi	r22, 0xF6	; 246
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8a 2d       	mov	r24, r10
				
				switch(bufor_uart[0]-'0') //testowo na lcd
 518:	9b 2d       	mov	r25, r11
 51a:	73 d0       	rcall	.+230    	; 0x602 <strcpy>
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	c0 97       	sbiw	r24, 0x30	; 48
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	91 05       	cpc	r25, r1
 526:	71 f0       	breq	.+28     	; 0x544 <main+0x9e>
 528:	1c f4       	brge	.+6      	; 0x530 <main+0x8a>
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	39 f0       	breq	.+14     	; 0x53c <main+0x96>
 52e:	15 c0       	rjmp	.+42     	; 0x55a <main+0xb4>
 530:	83 30       	cpi	r24, 0x03	; 3
 532:	91 05       	cpc	r25, r1
				{
					case 1:
					{
						pos(0,0);
 534:	59 f0       	breq	.+22     	; 0x54c <main+0xa6>
 536:	04 97       	sbiw	r24, 0x04	; 4
 538:	69 f0       	breq	.+26     	; 0x554 <main+0xae>
						break;
 53a:	0f c0       	rjmp	.+30     	; 0x55a <main+0xb4>
					}
					case 2:
					{
						pos(16,0);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	1d de       	rcall	.-966    	; 0x17c <WriteToLCD>
						break;
 542:	0b c0       	rjmp	.+22     	; 0x55a <main+0xb4>
					}
					case 3:
					{
						pos(36,1);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	80 e9       	ldi	r24, 0x90	; 144
 548:	19 de       	rcall	.-974    	; 0x17c <WriteToLCD>
						break;
 54a:	07 c0       	rjmp	.+14     	; 0x55a <main+0xb4>
					}
					case 4:
					{
						pos(20,1);
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	84 ee       	ldi	r24, 0xE4	; 228
 550:	15 de       	rcall	.-982    	; 0x17c <WriteToLCD>
						break;
					}
					
				}
				
				strcpy(bufor_uart,bufor_uart + przesuniecie_nr_urzadzenia);
 552:	03 c0       	rjmp	.+6      	; 0x55a <main+0xb4>
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	84 ed       	ldi	r24, 0xD4	; 212
 558:	11 de       	rcall	.-990    	; 0x17c <WriteToLCD>
 55a:	be 01       	movw	r22, r28
 55c:	6d 5f       	subi	r22, 0xFD	; 253
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8a 2d       	mov	r24, r10
				//strncpy(wifi_strength,bufor_uart,4);
				//lcd_RAM(wifi_strength);
				for(uint8_t i=0;i < 3;i++)
				{
					LCD_WRITE_DATA(bufor_uart[i]);
 562:	9b 2d       	mov	r25, r11
 564:	4e d0       	rcall	.+156    	; 0x602 <strcpy>
 566:	86 01       	movw	r16, r12
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	f8 01       	movw	r30, r16
 56c:	81 91       	ld	r24, Z+
				}
				
				strcpy(bufor_uart,bufor_uart + przesuniecie_nr_urzadzenia);
				//strncpy(wifi_strength,bufor_uart,4);
				//lcd_RAM(wifi_strength);
				for(uint8_t i=0;i < 3;i++)
 56e:	8f 01       	movw	r16, r30
 570:	05 de       	rcall	.-1014   	; 0x17c <WriteToLCD>
 572:	0e 15       	cp	r16, r14
				{
					LCD_WRITE_DATA(bufor_uart[i]);
				}
				ipd=0;
 574:	1f 05       	cpc	r17, r15
				memset(bufor_uart,0,sizeof (bufor_uart));
 576:	c1 f7       	brne	.-16     	; 0x568 <main+0xc2>
 578:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <ipd>
				
			}
		}
		if(server_ready)
 57c:	f6 01       	movw	r30, r12
 57e:	89 2d       	mov	r24, r9
 580:	11 92       	st	Z+, r1
 582:	8a 95       	dec	r24
		{
			server_ready=0;
 584:	e9 f7       	brne	.-6      	; 0x580 <main+0xda>
 586:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <server_ready>
			cls;
 58a:	88 23       	and	r24, r24
 58c:	09 f4       	brne	.+2      	; 0x590 <main+0xea>
 58e:	a8 cf       	rjmp	.-176    	; 0x4e0 <main+0x3a>
			pos(5,1);
 590:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <server_ready>
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	81 e0       	ldi	r24, 0x01	; 1
			lcd("START");
 598:	f1 dd       	rcall	.-1054   	; 0x17c <WriteToLCD>
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	85 ec       	ldi	r24, 0xC5	; 197
 59e:	ee dd       	rcall	.-1060   	; 0x17c <WriteToLCD>
 5a0:	88 e7       	ldi	r24, 0x78	; 120
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	70 de       	rcall	.-800    	; 0x286 <lcd_FLASH>
 5a6:	9c cf       	rjmp	.-200    	; 0x4e0 <main+0x3a>

000005a8 <UART_Init>:
	//UART2_Write(bufor);
//}

void UART_Init(void)
{
	UBRR0H=0;
 5a8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L=8;		//kolego dla 115200 8 przy @16Mhz ;)
 5ac:	88 e0       	ldi	r24, 0x08	; 8
 5ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B=(1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);
 5b2:	88 e9       	ldi	r24, 0x98	; 152
 5b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C=(1<<UCSZ00)|(1<<UCSZ01);
 5b8:	86 e0       	ldi	r24, 0x06	; 6
 5ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 5be:	08 95       	ret

000005c0 <UART_Char>:
}

void UART_Char(char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 5c0:	e0 ec       	ldi	r30, 0xC0	; 192
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	90 81       	ld	r25, Z
 5c6:	95 ff       	sbrs	r25, 5
 5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <UART_Char+0x4>
	UDR0=data;
 5ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5ce:	08 95       	ret

000005d0 <UART_Write>:
}

void UART_Write(const char *string)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	ec 01       	movw	r28, r24
	while(*string)
 5d6:	88 81       	ld	r24, Y
 5d8:	88 23       	and	r24, r24
 5da:	29 f0       	breq	.+10     	; 0x5e6 <UART_Write+0x16>
	{
		UART_Char(*string++);
 5dc:	21 96       	adiw	r28, 0x01	; 1
	UDR0=data;
}

void UART_Write(const char *string)
{
	while(*string)
 5de:	f0 df       	rcall	.-32     	; 0x5c0 <UART_Char>
 5e0:	89 91       	ld	r24, Y+
 5e2:	81 11       	cpse	r24, r1
	{
		UART_Char(*string++);
	}
}
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <UART_Write+0xe>
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <UART_crlf>:


void UART_crlf(void)
{
	UART_Char(13);
 5ec:	8d e0       	ldi	r24, 0x0D	; 13
	UART_Char(10);
 5ee:	e8 df       	rcall	.-48     	; 0x5c0 <UART_Char>
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	e6 cf       	rjmp	.-52     	; 0x5c0 <UART_Char>
 5f4:	08 95       	ret

000005f6 <__tablejump2__>:
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	05 90       	lpm	r0, Z+
 5fc:	f4 91       	lpm	r31, Z
 5fe:	e0 2d       	mov	r30, r0
 600:	09 94       	ijmp

00000602 <strcpy>:
 602:	fb 01       	movw	r30, r22
 604:	dc 01       	movw	r26, r24
 606:	01 90       	ld	r0, Z+
 608:	0d 92       	st	X+, r0
 60a:	00 20       	and	r0, r0
 60c:	e1 f7       	brne	.-8      	; 0x606 <strcpy+0x4>
 60e:	08 95       	ret

00000610 <strstr>:
 610:	fb 01       	movw	r30, r22
 612:	51 91       	ld	r21, Z+
 614:	55 23       	and	r21, r21
 616:	a9 f0       	breq	.+42     	; 0x642 <strstr+0x32>
 618:	bf 01       	movw	r22, r30
 61a:	dc 01       	movw	r26, r24
 61c:	4d 91       	ld	r20, X+
 61e:	45 17       	cp	r20, r21
 620:	41 11       	cpse	r20, r1
 622:	e1 f7       	brne	.-8      	; 0x61c <strstr+0xc>
 624:	59 f4       	brne	.+22     	; 0x63c <strstr+0x2c>
 626:	cd 01       	movw	r24, r26
 628:	01 90       	ld	r0, Z+
 62a:	00 20       	and	r0, r0
 62c:	49 f0       	breq	.+18     	; 0x640 <strstr+0x30>
 62e:	4d 91       	ld	r20, X+
 630:	40 15       	cp	r20, r0
 632:	41 11       	cpse	r20, r1
 634:	c9 f3       	breq	.-14     	; 0x628 <strstr+0x18>
 636:	fb 01       	movw	r30, r22
 638:	41 11       	cpse	r20, r1
 63a:	ef cf       	rjmp	.-34     	; 0x61a <strstr+0xa>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
