
AP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  008001a2  008001a2  0000069a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001985  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6e  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  00002ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00003724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000533  00000000  00000000  000038fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac7  00000000  00000000  00003e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000048f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c1       	rjmp	.+616    	; 0x2b2 <__vector_18>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	d2 01       	movw	r26, r4
  6a:	e3 01       	movw	r28, r6
  6c:	f4 01       	movw	r30, r8
  6e:	05 02       	muls	r16, r21
  70:	16 02       	muls	r17, r22
  72:	27 02       	muls	r18, r23
  74:	38 02       	muls	r19, r24
  76:	49 02       	muls	r20, r25

00000078 <__trampolines_end>:
  78:	53 54       	subi	r21, 0x43	; 67
  7a:	41 52       	subi	r20, 0x21	; 33
  7c:	54 00       	.word	0x0054	; ????

0000007e <__c.2138>:
  7e:	57 69 46 69 20 73 69 67 6e 61 6c 00                 WiFi signal.

0000008a <__c.2133>:
  8a:	53 54 41 52 54 00                                   START.

00000090 <__c.2130>:
  90:	43 50 53 54 00                                      CPST.

00000095 <__c.2127>:
  95:	43 50 53 56 00                                      CPSV.

0000009a <__c.2124>:
  9a:	43 50 4d 55 00                                      CPMU.

0000009f <__c.2121>:
  9f:	43 57 53 41 50 00                                   CWSAP.

000000a5 <__c.2118>:
  a5:	43 49 50 41 50 00                                   CIPAP.

000000ab <__c.2115>:
  ab:	43 57 4d 4f 44 45 00                                CWMODE.

000000b2 <__c.2111>:
  b2:	41 54 45 30 00                                      ATE0.

000000b7 <__c.2107>:
  b7:	72 65 61 64 79 00 00                                ready..

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d8 e0       	ldi	r29, 0x08	; 8
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e4 e6       	ldi	r30, 0x64	; 100
  d2:	f5 e0       	ldi	r31, 0x05	; 5
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a2 3a       	cpi	r26, 0xA2	; 162
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	a2 ea       	ldi	r26, 0xA2	; 162
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a9 3e       	cpi	r26, 0xE9	; 233
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
  f0:	d7 d1       	rcall	.+942    	; 0x4a0 <main>
  f2:	36 c2       	rjmp	.+1132   	; 0x560 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <rejestr>:
{
    unsigned char i =0;

    while(str[i])
        LCD_WRITE_DATA(str[i++]) ;
}
  f6:	66 23       	and	r22, r22
  f8:	31 f0       	breq	.+12     	; 0x106 <rejestr+0x10>
  fa:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <__data_end>
  fe:	89 2b       	or	r24, r25
 100:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
 104:	06 c0       	rjmp	.+12     	; 0x112 <rejestr+0x1c>
 106:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <__data_end>
 10a:	80 95       	com	r24
 10c:	89 23       	and	r24, r25
 10e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
 112:	41 98       	cbi	0x08, 1	; 8
 114:	42 98       	cbi	0x08, 2	; 8
 116:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 11a:	85 ff       	sbrs	r24, 5
 11c:	02 c0       	rjmp	.+4      	; 0x122 <rejestr+0x2c>
 11e:	40 9a       	sbi	0x08, 0	; 8
 120:	01 c0       	rjmp	.+2      	; 0x124 <rejestr+0x2e>
 122:	40 98       	cbi	0x08, 0	; 8
 124:	42 9a       	sbi	0x08, 2	; 8
 126:	42 98       	cbi	0x08, 2	; 8
 128:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 12c:	84 ff       	sbrs	r24, 4
 12e:	02 c0       	rjmp	.+4      	; 0x134 <rejestr+0x3e>
 130:	40 9a       	sbi	0x08, 0	; 8
 132:	01 c0       	rjmp	.+2      	; 0x136 <rejestr+0x40>
 134:	40 98       	cbi	0x08, 0	; 8
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	42 98       	cbi	0x08, 2	; 8
 13a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 13e:	83 ff       	sbrs	r24, 3
 140:	02 c0       	rjmp	.+4      	; 0x146 <rejestr+0x50>
 142:	40 9a       	sbi	0x08, 0	; 8
 144:	01 c0       	rjmp	.+2      	; 0x148 <rejestr+0x52>
 146:	40 98       	cbi	0x08, 0	; 8
 148:	42 9a       	sbi	0x08, 2	; 8
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 150:	82 ff       	sbrs	r24, 2
 152:	02 c0       	rjmp	.+4      	; 0x158 <rejestr+0x62>
 154:	40 9a       	sbi	0x08, 0	; 8
 156:	01 c0       	rjmp	.+2      	; 0x15a <rejestr+0x64>
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	42 9a       	sbi	0x08, 2	; 8
 15c:	42 98       	cbi	0x08, 2	; 8
 15e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 162:	81 ff       	sbrs	r24, 1
 164:	02 c0       	rjmp	.+4      	; 0x16a <rejestr+0x74>
 166:	40 9a       	sbi	0x08, 0	; 8
 168:	01 c0       	rjmp	.+2      	; 0x16c <rejestr+0x76>
 16a:	40 98       	cbi	0x08, 0	; 8
 16c:	42 9a       	sbi	0x08, 2	; 8
 16e:	42 98       	cbi	0x08, 2	; 8
 170:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 174:	80 ff       	sbrs	r24, 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <rejestr+0x86>
 178:	40 9a       	sbi	0x08, 0	; 8
 17a:	01 c0       	rjmp	.+2      	; 0x17e <rejestr+0x88>
 17c:	40 98       	cbi	0x08, 0	; 8
 17e:	42 9a       	sbi	0x08, 2	; 8
 180:	41 9a       	sbi	0x08, 1	; 8
 182:	08 95       	ret

00000184 <WriteToLCD>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	19 f4       	brne	.+6      	; 0x192 <WriteToLCD+0xe>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	b3 df       	rcall	.-154    	; 0xf6 <rejestr>
 190:	03 c0       	rjmp	.+6      	; 0x198 <WriteToLCD+0x14>
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	af df       	rcall	.-162    	; 0xf6 <rejestr>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	ac df       	rcall	.-168    	; 0xf6 <rejestr>
 19e:	c4 ff       	sbrs	r28, 4
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <WriteToLCD+0x26>
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	a7 df       	rcall	.-178    	; 0xf6 <rejestr>
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <WriteToLCD+0x2c>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	a3 df       	rcall	.-186    	; 0xf6 <rejestr>
 1b0:	c5 ff       	sbrs	r28, 5
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <WriteToLCD+0x38>
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	9e df       	rcall	.-196    	; 0xf6 <rejestr>
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <WriteToLCD+0x3e>
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	88 e0       	ldi	r24, 0x08	; 8
 1c0:	9a df       	rcall	.-204    	; 0xf6 <rejestr>
 1c2:	c6 ff       	sbrs	r28, 6
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <WriteToLCD+0x4a>
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	95 df       	rcall	.-214    	; 0xf6 <rejestr>
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <WriteToLCD+0x50>
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 e1       	ldi	r24, 0x10	; 16
 1d2:	91 df       	rcall	.-222    	; 0xf6 <rejestr>
 1d4:	cc 23       	and	r28, r28
 1d6:	24 f4       	brge	.+8      	; 0x1e0 <WriteToLCD+0x5c>
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	80 e2       	ldi	r24, 0x20	; 32
 1dc:	8c df       	rcall	.-232    	; 0xf6 <rejestr>
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <WriteToLCD+0x62>
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	88 df       	rcall	.-240    	; 0xf6 <rejestr>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	85 df       	rcall	.-246    	; 0xf6 <rejestr>
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	9f e1       	ldi	r25, 0x1F	; 31
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <WriteToLCD+0x6c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <WriteToLCD+0x72>
 1f6:	00 00       	nop
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	7c df       	rcall	.-264    	; 0xf6 <rejestr>
 1fe:	c0 ff       	sbrs	r28, 0
 200:	04 c0       	rjmp	.+8      	; 0x20a <WriteToLCD+0x86>
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	77 df       	rcall	.-274    	; 0xf6 <rejestr>
 208:	03 c0       	rjmp	.+6      	; 0x210 <WriteToLCD+0x8c>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	73 df       	rcall	.-282    	; 0xf6 <rejestr>
 210:	c1 ff       	sbrs	r28, 1
 212:	04 c0       	rjmp	.+8      	; 0x21c <WriteToLCD+0x98>
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	6e df       	rcall	.-292    	; 0xf6 <rejestr>
 21a:	03 c0       	rjmp	.+6      	; 0x222 <WriteToLCD+0x9e>
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	6a df       	rcall	.-300    	; 0xf6 <rejestr>
 222:	c2 ff       	sbrs	r28, 2
 224:	04 c0       	rjmp	.+8      	; 0x22e <WriteToLCD+0xaa>
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	65 df       	rcall	.-310    	; 0xf6 <rejestr>
 22c:	03 c0       	rjmp	.+6      	; 0x234 <WriteToLCD+0xb0>
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	61 df       	rcall	.-318    	; 0xf6 <rejestr>
 234:	c3 ff       	sbrs	r28, 3
 236:	04 c0       	rjmp	.+8      	; 0x240 <WriteToLCD+0xbc>
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	5c df       	rcall	.-328    	; 0xf6 <rejestr>
 23e:	03 c0       	rjmp	.+6      	; 0x246 <WriteToLCD+0xc2>
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	58 df       	rcall	.-336    	; 0xf6 <rejestr>
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	55 df       	rcall	.-342    	; 0xf6 <rejestr>
 24c:	8f e3       	ldi	r24, 0x3F	; 63
 24e:	9f e1       	ldi	r25, 0x1F	; 31
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <WriteToLCD+0xcc>
 254:	00 c0       	rjmp	.+0      	; 0x256 <WriteToLCD+0xd2>
 256:	00 00       	nop
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <lcd_init>:
 25c:	87 b1       	in	r24, 0x07	; 7
 25e:	87 60       	ori	r24, 0x07	; 7
 260:	87 b9       	out	0x07, r24	; 7
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	89 ef       	ldi	r24, 0xF9	; 249
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <lcd_init+0xc>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_init+0x16>
 272:	00 00       	nop
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	82 e1       	ldi	r24, 0x12	; 18
 278:	85 df       	rcall	.-246    	; 0x184 <WriteToLCD>
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	82 df       	rcall	.-252    	; 0x184 <WriteToLCD>
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	7f df       	rcall	.-258    	; 0x184 <WriteToLCD>
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	7c cf       	rjmp	.-264    	; 0x184 <WriteToLCD>
 28c:	08 95       	ret

0000028e <lcd_FLASH>:
void lcd_FLASH(const char *str)
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
unsigned char znak=0;
	while((znak=pgm_read_byte(str++)))
 292:	ec 01       	movw	r28, r24
 294:	21 96       	adiw	r28, 0x01	; 1
 296:	fc 01       	movw	r30, r24
 298:	84 91       	lpm	r24, Z
 29a:	88 23       	and	r24, r24
 29c:	39 f0       	breq	.+14     	; 0x2ac <lcd_FLASH+0x1e>
		LCD_WRITE_DATA(znak);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	71 df       	rcall	.-286    	; 0x184 <WriteToLCD>
        LCD_WRITE_DATA(str[i++]) ;
}
void lcd_FLASH(const char *str)
{
unsigned char znak=0;
	while((znak=pgm_read_byte(str++)))
 2a2:	fe 01       	movw	r30, r28
 2a4:	84 91       	lpm	r24, Z
 2a6:	21 96       	adiw	r28, 0x01	; 1
 2a8:	81 11       	cpse	r24, r1
 2aa:	f9 cf       	rjmp	.-14     	; 0x29e <lcd_FLASH+0x10>
		LCD_WRITE_DATA(znak);
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <__vector_18>:

uint8_t server_ready=0;
#define debug
inline uint8_t* znajdz(const char *pattern);
ISR(USART_RX_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	8f 93       	push	r24
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	znak=UDR0;
 2c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2c6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <znak>
	cnt++;
 2ca:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <cnt>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <cnt>
	if(znak==10 || znak ==13)
 2d4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <znak>
 2d8:	8a 30       	cpi	r24, 0x0A	; 10
 2da:	21 f0       	breq	.+8      	; 0x2e4 <__vector_18+0x32>
 2dc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <znak>
 2e0:	8d 30       	cpi	r24, 0x0D	; 13
 2e2:	49 f4       	brne	.+18     	; 0x2f6 <__vector_18+0x44>
	{
		if(indeks_uart)
 2e4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <indeks_uart>
 2e8:	88 23       	and	r24, r24
 2ea:	29 f0       	breq	.+10     	; 0x2f6 <__vector_18+0x44>
		{
			indeks_uart=0;
 2ec:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <indeks_uart>
			flaga_uart=1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <flaga_uart>
		}
	}
	if(znak!=13 && znak !=10)
 2f6:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <znak>
 2fa:	8d 30       	cpi	r24, 0x0D	; 13
 2fc:	a9 f0       	breq	.+42     	; 0x328 <__vector_18+0x76>
 2fe:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <znak>
 302:	8a 30       	cpi	r24, 0x0A	; 10
 304:	89 f0       	breq	.+34     	; 0x328 <__vector_18+0x76>
	{
		bufor_uart[indeks_uart++]=znak;
 306:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <indeks_uart>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	8e 0f       	add	r24, r30
 30e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <indeks_uart>
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <znak>
 318:	e8 55       	subi	r30, 0x58	; 88
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	80 83       	st	Z, r24
		indeks_uart &= 0x3f;		//utnij gdyby indeks > 63
 31e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <indeks_uart>
 322:	8f 73       	andi	r24, 0x3F	; 63
 324:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <indeks_uart>
	}
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <esp_startup>:
    }
}

inline uint8_t* znajdz(const char *pattern)
{
	return(strstr(bufor_uart,pattern));	
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	88 ea       	ldi	r24, 0xA8	; 168
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	f5 d0       	rcall	.+490    	; 0x52c <strstr>
void esp_startup(void)
{
	enum esp_enum {ESP_ATE=1,ESP_CWMODE,ESP_CIPAP,ESP_CWSAP,ESP_CIPMUX,ESP_CIPSERVER,ESP_CISPSTO,ESP_SUCCESS};
	static uint8_t esp_status=0;
	uint8_t new_cmd=0;
	if(znajdz("ready"))
 342:	89 2b       	or	r24, r25
 344:	51 f0       	breq	.+20     	; 0x35a <esp_startup+0x22>
	{
		#ifdef debug
			pos(0,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	80 e8       	ldi	r24, 0x80	; 128
			lcd("ready");
 34a:	1c df       	rcall	.-456    	; 0x184 <WriteToLCD>
 34c:	87 eb       	ldi	r24, 0xB7	; 183
 34e:	90 e0       	ldi	r25, 0x00	; 0
		#endif
		esp_status = ESP_ATE;
 350:	9e df       	rcall	.-196    	; 0x28e <lcd_FLASH>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <esp_status.2105>
    }
}

inline uint8_t* znajdz(const char *pattern)
{
	return(strstr(bufor_uart,pattern));	
 358:	25 c0       	rjmp	.+74     	; 0x3a4 <esp_startup+0x6c>
 35a:	66 e0       	ldi	r22, 0x06	; 6
 35c:	71 e0       	ldi	r23, 0x01	; 1
 35e:	88 ea       	ldi	r24, 0xA8	; 168
 360:	91 e0       	ldi	r25, 0x01	; 1
			lcd("ready");
		#endif
		esp_status = ESP_ATE;
		new_cmd=1;
	}
	else if(znajdz("OK"))
 362:	e4 d0       	rcall	.+456    	; 0x52c <strstr>
 364:	89 2b       	or	r24, r25
 366:	09 f4       	brne	.+2      	; 0x36a <esp_startup+0x32>
	{
		if(esp_status && esp_status < ESP_SUCCESS)
 368:	9a c0       	rjmp	.+308    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 36a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <esp_status.2105>
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	98 0f       	add	r25, r24
 372:	97 30       	cpi	r25, 0x07	; 7
		{	esp_status++;}
 374:	18 f4       	brcc	.+6      	; 0x37c <esp_startup+0x44>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <esp_status.2105>
		new_cmd=1;
		memset(bufor_uart,0,64);
 37c:	80 e4       	ldi	r24, 0x40	; 64
 37e:	e8 ea       	ldi	r30, 0xA8	; 168
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	df 01       	movw	r26, r30
 384:	1d 92       	st	X+, r1
 386:	8a 95       	dec	r24
	}
	if(new_cmd)
	{
		new_cmd=0;
		switch(esp_status)
 388:	e9 f7       	brne	.-6      	; 0x384 <esp_startup+0x4c>
 38a:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <esp_status.2105>
 38e:	8e 2f       	mov	r24, r30
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	e8 30       	cpi	r30, 0x08	; 8
 398:	f1 05       	cpc	r31, r1
 39a:	08 f0       	brcs	.+2      	; 0x39e <esp_startup+0x66>
 39c:	80 c0       	rjmp	.+256    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		{
			case ESP_ATE:
			{
				#ifdef debug
					pos(0,1);
 39e:	ec 5c       	subi	r30, 0xCC	; 204
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	be c0       	rjmp	.+380    	; 0x520 <__tablejump2__>
					lcd("ATE0");
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	80 ec       	ldi	r24, 0xC0	; 192
 3a8:	ed de       	rcall	.-550    	; 0x184 <WriteToLCD>
 3aa:	82 eb       	ldi	r24, 0xB2	; 178
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	6f df       	rcall	.-290    	; 0x28e <lcd_FLASH>
 3b0:	8f e3       	ldi	r24, 0x3F	; 63
				#endif
				new_cmd=0;
				_delay_ms(10);
				UART_Write("ATE0");UART_crlf();
 3b2:	9c e9       	ldi	r25, 0x9C	; 156
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <esp_startup+0x7c>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <esp_startup+0x82>
				break;
 3ba:	00 00       	nop
			}
			case ESP_CWMODE:
			{
				#ifdef debug
					pos(20,0);
 3bc:	89 e0       	ldi	r24, 0x09	; 9
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	9c d0       	rcall	.+312    	; 0x4fa <UART_Write>
 3c2:	a9 c0       	rjmp	.+338    	; 0x516 <UART_crlf>
					lcd("CWMODE");
 3c4:	08 95       	ret
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	84 e9       	ldi	r24, 0x94	; 148
 3ca:	dc de       	rcall	.-584    	; 0x184 <WriteToLCD>
 3cc:	8b ea       	ldi	r24, 0xAB	; 171
 3ce:	90 e0       	ldi	r25, 0x00	; 0
				#endif
				_delay_ms(10);
				UART_Write("AT+CWMODE=2");UART_crlf();
 3d0:	5e df       	rcall	.-324    	; 0x28e <lcd_FLASH>
 3d2:	af e3       	ldi	r26, 0x3F	; 63
 3d4:	bc e9       	ldi	r27, 0x9C	; 156
 3d6:	11 97       	sbiw	r26, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <esp_startup+0x9e>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <esp_startup+0xa4>
				break;
 3dc:	00 00       	nop
			}
			case ESP_CIPAP:
			{
				#ifdef debug
					pos(20,1);
 3de:	8e e0       	ldi	r24, 0x0E	; 14
 3e0:	91 e0       	ldi	r25, 0x01	; 1
					lcd("CIPAP");
 3e2:	8b d0       	rcall	.+278    	; 0x4fa <UART_Write>
 3e4:	98 c0       	rjmp	.+304    	; 0x516 <UART_crlf>
 3e6:	08 95       	ret
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	84 ed       	ldi	r24, 0xD4	; 212
 3ec:	cb de       	rcall	.-618    	; 0x184 <WriteToLCD>
 3ee:	85 ea       	ldi	r24, 0xA5	; 165
 3f0:	90 e0       	ldi	r25, 0x00	; 0
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPAP_DEF=\"192.168.4.0\",\"192.168.4.0\",\"255.255.255.0\"");UART_crlf();
 3f2:	4d df       	rcall	.-358    	; 0x28e <lcd_FLASH>
 3f4:	8f e3       	ldi	r24, 0x3F	; 63
 3f6:	9c e9       	ldi	r25, 0x9C	; 156
 3f8:	01 97       	sbiw	r24, 0x01	; 1
				break;
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <esp_startup+0xc0>
			}
			case ESP_CWSAP:
			{
				#ifdef debug
					pos(10,0);
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <esp_startup+0xc6>
 3fe:	00 00       	nop
 400:	8a e1       	ldi	r24, 0x1A	; 26
					lcd("CWSAP");
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	7a d0       	rcall	.+244    	; 0x4fa <UART_Write>
 406:	87 c0       	rjmp	.+270    	; 0x516 <UART_crlf>
 408:	08 95       	ret
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8a e8       	ldi	r24, 0x8A	; 138
 40e:	ba de       	rcall	.-652    	; 0x184 <WriteToLCD>
 410:	8f e9       	ldi	r24, 0x9F	; 159
				#endif	
				_delay_ms(10);
				UART_Write("AT+CWSAP_DEF=\"PTPT\",\"12341234\",6,4");UART_crlf();
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	3c df       	rcall	.-392    	; 0x28e <lcd_FLASH>
 416:	af e3       	ldi	r26, 0x3F	; 63
				break;
 418:	bc e9       	ldi	r27, 0x9C	; 156
			}
			case ESP_CIPMUX:
			{
				#ifdef debug
					pos(10,1);
 41a:	11 97       	sbiw	r26, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
					lcd("CPMU");
 420:	00 00       	nop
 422:	83 e5       	ldi	r24, 0x53	; 83
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	69 d0       	rcall	.+210    	; 0x4fa <UART_Write>
 428:	76 c0       	rjmp	.+236    	; 0x516 <UART_crlf>
 42a:	08 95       	ret
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	8a ec       	ldi	r24, 0xCA	; 202
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPMUX=1");UART_crlf();
 430:	a9 de       	rcall	.-686    	; 0x184 <WriteToLCD>
 432:	8a e9       	ldi	r24, 0x9A	; 154
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	2b df       	rcall	.-426    	; 0x28e <lcd_FLASH>
				break;
 438:	8f e3       	ldi	r24, 0x3F	; 63
			}
			case ESP_CIPSERVER:
			{
				#ifdef debug
					pos(30,0);
 43a:	9c e9       	ldi	r25, 0x9C	; 156
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
					lcd("CPSV");
 442:	00 00       	nop
 444:	86 e7       	ldi	r24, 0x76	; 118
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	58 d0       	rcall	.+176    	; 0x4fa <UART_Write>
 44a:	65 c0       	rjmp	.+202    	; 0x516 <UART_crlf>
 44c:	08 95       	ret
 44e:	60 e0       	ldi	r22, 0x00	; 0
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPSERVER=1,81");UART_crlf();
 450:	8e e9       	ldi	r24, 0x9E	; 158
 452:	98 de       	rcall	.-720    	; 0x184 <WriteToLCD>
 454:	85 e9       	ldi	r24, 0x95	; 149
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	1a df       	rcall	.-460    	; 0x28e <lcd_FLASH>
 45a:	af e3       	ldi	r26, 0x3F	; 63
				break;
 45c:	bc e9       	ldi	r27, 0x9C	; 156
			}
			case ESP_CISPSTO:
			{
				#ifdef debug
					pos(30,1);
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
					lcd("CPST");
 466:	82 e8       	ldi	r24, 0x82	; 130
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	47 d0       	rcall	.+142    	; 0x4fa <UART_Write>
 46c:	54 c0       	rjmp	.+168    	; 0x516 <UART_crlf>
 46e:	08 95       	ret
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	8e ed       	ldi	r24, 0xDE	; 222
 474:	87 de       	rcall	.-754    	; 0x184 <WriteToLCD>
 476:	80 e9       	ldi	r24, 0x90	; 144
 478:	90 e0       	ldi	r25, 0x00	; 0
				#endif
				_delay_ms(10);
				UART_Write("AT+CIPSTO=100");UART_crlf();
 47a:	09 df       	rcall	.-494    	; 0x28e <lcd_FLASH>
 47c:	8f e3       	ldi	r24, 0x3F	; 63
 47e:	9c e9       	ldi	r25, 0x9C	; 156
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				break;
 486:	00 00       	nop
			}
			case ESP_SUCCESS:
			{
				lcd("START");
 488:	84 e9       	ldi	r24, 0x94	; 148
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	36 d0       	rcall	.+108    	; 0x4fa <UART_Write>
 48e:	43 c0       	rjmp	.+134    	; 0x516 <UART_crlf>
				server_ready=1;
 490:	08 95       	ret
 492:	8a e8       	ldi	r24, 0x8A	; 138
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fb de       	rcall	.-522    	; 0x28e <lcd_FLASH>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <server_ready>
 49e:	08 95       	ret

000004a0 <main>:
	}//new cmd
}
int main(void)
{
	UART_Init();
	lcd_init();
 4a0:	18 d0       	rcall	.+48     	; 0x4d2 <UART_Init>
 4a2:	dc de       	rcall	.-584    	; 0x25c <lcd_init>
	sei();
  
	lcd("WiFi signal");
 4a4:	78 94       	sei
 4a6:	8e e7       	ldi	r24, 0x7E	; 126
 4a8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t *ptr;
	char wifi_strength[4];
//	UART_Write("AT");UART_crlf();
    while (1) 
    {
		if(flaga_uart)
 4aa:	f1 de       	rcall	.-542    	; 0x28e <lcd_FLASH>
 4ac:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <flaga_uart>
		{
			flaga_uart=0;
 4b0:	88 23       	and	r24, r24
 4b2:	19 f0       	breq	.+6      	; 0x4ba <main+0x1a>
			esp_startup();
 4b4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <flaga_uart>
			
		}
		if(server_ready==1)
 4b8:	3f df       	rcall	.-386    	; 0x338 <esp_startup>
 4ba:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <server_ready>
		{
			server_ready=0;
 4be:	81 30       	cpi	r24, 0x01	; 1
			cls;
 4c0:	a9 f7       	brne	.-22     	; 0x4ac <main+0xc>
 4c2:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <server_ready>
			lcd("START");
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	5d de       	rcall	.-838    	; 0x184 <WriteToLCD>
 4ca:	88 e7       	ldi	r24, 0x78	; 120
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	df de       	rcall	.-578    	; 0x28e <lcd_FLASH>
 4d0:	ed cf       	rjmp	.-38     	; 0x4ac <main+0xc>

000004d2 <UART_Init>:
}
char UART_Read(void)
{
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
 4d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4dc:	88 e9       	ldi	r24, 0x98	; 152
 4de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 4e8:	08 95       	ret

000004ea <UART_Char>:
 4ea:	e0 ec       	ldi	r30, 0xC0	; 192
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	90 81       	ld	r25, Z
 4f0:	95 ff       	sbrs	r25, 5
 4f2:	fd cf       	rjmp	.-6      	; 0x4ee <UART_Char+0x4>
 4f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4f8:	08 95       	ret

000004fa <UART_Write>:
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
 500:	88 81       	ld	r24, Y
 502:	88 23       	and	r24, r24
 504:	29 f0       	breq	.+10     	; 0x510 <UART_Write+0x16>
 506:	21 96       	adiw	r28, 0x01	; 1
 508:	f0 df       	rcall	.-32     	; 0x4ea <UART_Char>
 50a:	89 91       	ld	r24, Y+
 50c:	81 11       	cpse	r24, r1
 50e:	fc cf       	rjmp	.-8      	; 0x508 <UART_Write+0xe>
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <UART_crlf>:

void UART_crlf(void)
{
	UART_Char(13);
 516:	8d e0       	ldi	r24, 0x0D	; 13
	UART_Char(10);
 518:	e8 df       	rcall	.-48     	; 0x4ea <UART_Char>
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	e6 cf       	rjmp	.-52     	; 0x4ea <UART_Char>
 51e:	08 95       	ret

00000520 <__tablejump2__>:
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	05 90       	lpm	r0, Z+
 526:	f4 91       	lpm	r31, Z
 528:	e0 2d       	mov	r30, r0
 52a:	09 94       	ijmp

0000052c <strstr>:
 52c:	fb 01       	movw	r30, r22
 52e:	51 91       	ld	r21, Z+
 530:	55 23       	and	r21, r21
 532:	a9 f0       	breq	.+42     	; 0x55e <strstr+0x32>
 534:	bf 01       	movw	r22, r30
 536:	dc 01       	movw	r26, r24
 538:	4d 91       	ld	r20, X+
 53a:	45 17       	cp	r20, r21
 53c:	41 11       	cpse	r20, r1
 53e:	e1 f7       	brne	.-8      	; 0x538 <strstr+0xc>
 540:	59 f4       	brne	.+22     	; 0x558 <strstr+0x2c>
 542:	cd 01       	movw	r24, r26
 544:	01 90       	ld	r0, Z+
 546:	00 20       	and	r0, r0
 548:	49 f0       	breq	.+18     	; 0x55c <strstr+0x30>
 54a:	4d 91       	ld	r20, X+
 54c:	40 15       	cp	r20, r0
 54e:	41 11       	cpse	r20, r1
 550:	c9 f3       	breq	.-14     	; 0x544 <strstr+0x18>
 552:	fb 01       	movw	r30, r22
 554:	41 11       	cpse	r20, r1
 556:	ef cf       	rjmp	.-34     	; 0x536 <strstr+0xa>
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
